//==============================================================================
#include <iostream>           //  CCCCC RRRRR  EEEEE  AAA   TTTTT EEEEE DDDD
#include<algorithm>           //  C     R  R   E     A   A    T   E     D   D
#include<bits/stdc++.h>       //  C     RRRR   EEEE  AAAAA    T   EEEE  D   D
#include<cstring>             //  C     R  R   E     A   A    T   E     D   D
#include<vector>              //  CCCCC R   R  EEEEE A   A    T   EEEEE DDDD
//==============================================================================
#include<stack>               //  BBBB   Y   Y
#include<queue>               //  B   B   Y Y
#include<deque>               //  BBBB     Y
#include<cmath>               //  B   B    Y
#include<numeric>             //  BBBB     Y
//==============================================================================
#include<utility>             //   AAA  M   M M   M IIIII TTTTT
//#include<unordered_map>     //  A   A MMMMM MMMMM   I     T
//#include<unordered_set>     //  AAAAA M M M M M M   I     T
//#include<unordered_set>     //  A   A M   M M   M   I     T
//aaaaaaaaaaaaaaaaaaaaaaa     //  A   A M   M M   M IIIII   T
//==============================================================================
/*
  //representation of graph using adjacency_list
  //
*/

using namespace std;


int main() 
{
     
	int vertex,edge,x,y;
	cin>>vertex>>edge;
	vector<int> adj[vertex+1];
	for(int i=0;i<edge;i++)
	{
	     cin>>x>>y;
	     adj[x].push_back(y);
	}
	//cout<<adj[5]
	for(int i=1;i<=vertex;i++)
	{
	     if(adj[i].size()>0)
	     cout<<i<<"=";
	     for(int j=0;j<adj[i].size();j++)
	     {
	          if(j == adj[i].size() - 1)
                    cout << adj[i][j];
            else
                cout << adj[i][j] <<",";
	     }
	     cout<<"\n";
	}
//to clear vector space;
  for(int i=0;i<vertex+1;i++)
   {
     adj[i].clear();
   }
	
}
